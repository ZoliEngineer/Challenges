package com.juzo.challenges.codechef.stringquery;

public class StringEditor {
    private static final int MIN_LENGTH = 10;
    private static final int MAX_LENGTH = 1_500_000;
    private char[] editedString;

    // TODO: performance improvement:
    // allocate bigger array than necessary
    // store the actual size
    // only create new array, when the current one is run out of size
    // => much fewer array creation, even zero, if the length is not growing limitless over the time

    private StringEditor(char[] editedString) {
        this.editedString = editedString;
    }

    public static StringEditor createEditorFor(String editedString) {
        char[] arrayString = editedString.toCharArray();
        if (!checkInput(arrayString)) {
            throw new IllegalArgumentException("Input doesn't satisfy format requirements");
        }
        return new StringEditor(arrayString);
    }

    public void insertLeft(char newChar) {
        if (!checkCharacterIsValid(newChar)) {
            throw new IllegalArgumentException("Wrong character");
        }
        if (isInsertAvailable()) {
            char[] newString = new char[editedString.length + 1];
            newString[0] = newChar;
            System.arraycopy(editedString, 0, newString, 1, editedString.length);
            editedString = newString;
        }
    }

    public void insertRight(char newChar) {
        if (!checkCharacterIsValid(newChar)) {
            throw new IllegalArgumentException("Wrong character");
        }
        if (isInsertAvailable()) {
            char[] newString = new char[editedString.length + 1];
            newString[editedString.length] = newChar;
            System.arraycopy(editedString, 0, newString, 0, editedString.length);
            editedString = newString;
        }
    }

    public void deleteLeft() {
        if (isDeleteAvailable()) {
            char[] newString = new char[editedString.length - 1];
            System.arraycopy(editedString, 1, newString, 0, editedString.length - 1);
            editedString = newString;
        }
    }

    public void deleteRight() {
        if (isDeleteAvailable()) {
            char[] newString = new char[editedString.length - 1];
            System.arraycopy(editedString, 0, newString, 0, editedString.length - 1);
            editedString = newString;
        }
    }

    public void deleteMiddle() {
        if (isDeleteAvailable()) {

            int origLength = editedString.length;
            int middlePosition = origLength / 2;
            char[] newString = new char[origLength - 1];

            System.arraycopy(editedString, 0, newString, 0, origLength / 2);
            System.arraycopy(editedString, middlePosition + 1, newString, middlePosition, origLength - (origLength / 2) - 1);

            editedString = newString;
        }
    }

    public void insertMiddle(char newChar) {
        if (!checkCharacterIsValid(newChar)) {
            throw new IllegalArgumentException("Wrong character");
        }
        if (isInsertAvailable()) {
            int origLength = editedString.length;
            int middlePosition = origLength / 2;
            char[] newString = new char[origLength + 1];

            System.arraycopy(editedString, 0, newString, 0, origLength / 2);
            System.arraycopy(editedString, middlePosition, newString, middlePosition + 1, origLength - (origLength / 2));
            newString[middlePosition] = newChar;

            editedString = newString;
        }
    }

    public int query(String queriedString) {
        int occurences = 0;
        char[] queried = queriedString.toCharArray();
        if (!checkMaxLength(queried) || !checkStringHasValidCharactersOnly(queried)) {
            throw new IllegalArgumentException();
        }
        for (int position = 0; position < editedString.length; position++) {
            // can be tuned by prechecking the first n characters (n=1 here)
            if (editedString[position] == queried[0] && presentAtPosition(position, queried)) {
                occurences++;
            }
        }
        return occurences;
    }

    private boolean presentAtPosition(int startPosition, char[] queried) {
        int queriedPosition = 0;
        int endPosition = startPosition + queried.length;
        for (int position = startPosition; position < endPosition; position++) {
            if (editedString[position] != queried[queriedPosition++]) {
                return false;
            }
        }
        return true;
    }

    public String getResult() {
        return new String(editedString).intern();
    }

    private static boolean checkInput(char[] input) {
        return checkMinLength(input) && checkStringHasValidCharactersOnly(input);
    }

    private static boolean checkMinLength(char[] string) {
        return string.length >= MIN_LENGTH;
    }

    private boolean isDeleteAvailable() {
        return editedString.length > MIN_LENGTH;
    }

    private boolean isInsertAvailable() {
        return editedString.length < MAX_LENGTH;
    }

    private static boolean checkMaxLength(char[] string) {
        return string.length <= MAX_LENGTH;
    }

    private static boolean checkStringHasValidCharactersOnly(char[] string) {
        for (char c : string) {
            if (!checkCharacterIsValid(c)) {
                return false;
            }
        }
        return true;
    }

    private static boolean checkCharacterIsValid(char c) {
        return (c >= 'a' && c <= 'z');
    }
}
